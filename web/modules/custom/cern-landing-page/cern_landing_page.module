<?php

/**
 * Implement HOOK_form_ID_FORM_form_alter
 */
function cern_landing_page_form_node_landing_page_edit_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
    $form['#validate'][] = 'scrolling_menu_titles_form_validate';
    $form['#validate'][] = 'notTwoCoverParallaxFollowed';
}

/**
 * Validation form for the landing page form.
*
*/
function scrolling_menu_titles_form_validate($form, \Drupal\Core\Form\FormState &$form_state) {
    $allowedTitles = 7;

    $paragraphs = $form_state->getStorage()['field_storage']['#parents']['#fields']['field_component']['paragraphs'];

    $titleCount = 0;
    foreach ($paragraphs as $key => $value) {
        try {
            if ($value['entity']->get('field_p_row_show_in_scroll')->getValue()) {
                $titleCount += (int)$value['entity']->get('field_p_row_show_in_scroll')->getValue()[0]['value'];
            }
        } catch (Exception $e) {
            $titleCount += 0;
        }
    }

    if ($titleCount > $allowedTitles) {
        $form_state->setErrorByName('ScrollMenuItems', t('Too many items in scroll menu. Please uncheck at least '.($titleCount - $allowedTitles).' [Show Scrolling Menu Title] checkbox(s).'));
    }
}

function notTwoCoverParallaxFollowed($form, \Drupal\Core\Form\FormState &$form_state) {    
    $paragraphs = $form_state->getStorage()['field_storage']['#parents']['#fields']['field_component']['paragraphs'];

    $error = false;
    $parallaxCount = 0;
    foreach ($paragraphs as $key => $value) {  
        try {
            if ($value['entity']->get('field_p_row_effects')) {
                if ($value['entity']->get('field_p_row_effects')->getValue()[0]['value'] == "Cover Parallax Full") {
                    $parallaxCount += 1;
                } else {
                    $parallaxCount = 0;
                }
            }
            if ($parallaxCount > 1) {
                $error = true;
            }
        } catch (Exception $e) {
            //$titleCount += 0;
        }
    }
    if ($error) {
        $form_state->setErrorByName('To Many Cover full Parallax followed', t('You can not set to CoverParallaxFull followed.'));
    }
}

/**
 * Implements hook_form_alter() to add classes to the search form.
 */
function cern_landing_page_form_alter(&$form, \Drupal\Core\Form\FormStateInterface $form_state, $form_id) {
  // Apply only for Landing Page form (Create and Edit)
  if ($form_id == 'node_landing_page_edit_form' || $form_id == 'node_landing_page_form') {
      // Hide / Show listing media
      if (isset( $form['field_listing_media'])) { 
        $form['field_listing_cds']['#states'] = [
          'visible' => [
            'select[name="field_listing_media"]' => ['value' => 'cds']
          ]
        ];
    
        $form['field_listing_image']['#states'] = [
          'visible' => [
            'select[name="field_listing_media"]' => ['value' => 'image']
          ]
        ];
      } 
    }
  }


/**
 * Fixed the "Non-translatable fields can only be changed when updating the current revision." error
 *
 * @param array $entity_types
 */
function cern_landing_page_entity_type_alter(array &$entity_types) {
	foreach ($entity_types as $entity_type)
	{
		$constraints = $entity_type->getConstraints();
		unset($constraints['EntityUntranslatableFields']);
		$entity_type->setConstraints($constraints);
	}
}
