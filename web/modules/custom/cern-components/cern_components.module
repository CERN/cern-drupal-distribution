<?php

use Drupal\ui_patterns\UiPatterns;
use Drupal\Component\Utility\Html;



/**
 * Implements hook_preprocess().
 */
function cern_components_preprocess(&$variables, $hook) {

  $variables['cern_node_type'] = '';
  // Check if a node exists
  if ($object = \Drupal::routeMatch()->getParameter('node')) {
    // if $node is object (for nodes)
    if ($object instanceof \Drupal\node\NodeInterface) {
      $variables['cern_node_type'] = \Drupal::routeMatch()->getParameter('node')->getType();
    // if $node is string (for revisions)
    } else if (is_string($object)) {
      $variables['cern_node_type'] = node_load($object)->getType();
    }
  }

  $language = \Drupal::languageManager()->getCurrentLanguage()->getId();
  $variables['cernLanguage'] = $language;

  foreach (array_keys(UiPatterns::getPatternDefinitions()) as $pattern_id) {
    if ($hook === 'pattern_'.$pattern_id) {
      $ids = &drupal_static(__FUNCTION__, []);
      if (!isset($ids[$pattern_id])) {
        $ids[$pattern_id] = 0;
      }
      if (!isset($variables['attributes']['id'])) {
        $variables['attributes']['id'] = Html::getUniqueId($pattern_id);
      }

      /** @var $context \Drupal\ui_patterns\Element\PatternContext */
      $context = $variables['context'];
      $entity_type = $context->getProperty('entity_type');
      if ($entity_type != 'paragraph'){
        break;
      }
      /** @var $paragraph \Drupal\paragraphs\Entity\Paragraph */
      $paragraph = $context->getProperty('entity');
      // All fields.
      $fields = $paragraph->getFields();
      $fields = array_filter($fields, function ($key) use ($pattern_id){
        return strpos($key, 'field_p_'.$pattern_id) !== FALSE;
      }, ARRAY_FILTER_USE_KEY);
      // Pattern fields.
      $pattern_fields = array_filter($variables, function ($value, $key) use ($pattern_id){
        return is_array($value) && strpos(key($value), 'field_p_'.$pattern_id) !== FALSE;
      }, ARRAY_FILTER_USE_BOTH);
      $pattern_fields = array_map(function ($field){
        return key($field);
      }, $pattern_fields);
      $pattern_fields = array_values($pattern_fields);
      $fields = array_filter($fields, function($key) use ($pattern_fields){
        return !in_array($key, $pattern_fields);
      }, ARRAY_FILTER_USE_KEY);
      foreach ($fields as $key => $field) {
        $key = str_replace('field_p_'.$pattern_id.'_', '', $key);
        $value = $field->getValue();
        $variables['variants'][$key] = reset($value);
      }
      break;
    }
  }
}
