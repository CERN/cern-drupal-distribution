<?php

use Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException;
use Drupal\Component\Plugin\Exception\PluginNotFoundException;
use Drupal\Core\Entity\EntityStorageException;
use Drupal\Core\StringTranslation\TranslatableMarkup;
use Drupal\field\Entity\FieldConfig;
use Drupal\field\Entity\FieldStorageConfig;

/**
 * Installs row_hidden field in Section paragraph type
 * @throws EntityStorageException
 * @throws PluginNotFoundException when plugin is not found
 * @throws InvalidPluginDefinitionException
 */
function cern_paragraph_section_update_8201() {
	try{
		$fieldName = 'field_p_row_hidden';
		$entityType = 'paragraph';
		$bundle = 'cern_section';
		$update_message = '';

		// create field storage
		if (empty(FieldStorageConfig::loadByName('paragraph', $fieldName))) {

			// creates the field storage
			$fieldStorage = FieldStorageConfig::create(
					[ 'field_name'  => $fieldName,
							'langcode'  => 'en',
							'entity_type' => $entityType,
							'type' => 'boolean',
							'locked' => FALSE,
							'cardinality' => -1,
							'translatable' => TRUE,
							'persist_with_no_fields' => FALSE,
							'custom_storage'  => FALSE,
					]
			);
			$fieldStorage->save();
		}

		// create field
		if (empty(FieldConfig::loadByName('paragraph','cern_section', $fieldName))) {
			// creates the field in cern_section
			$field = FieldConfig::create(
					array(
							'field_name' => 'field_p_row_hidden',
							'entity_type' => $entityType,
							'bundle' => $bundle,
							'label' => 'Hide Section',
							'description' => 'Do you want this section to be hidden?',
							'required' => FALSE)
			);
			$field->save();
		}

		// set form display
		$manageFormDisplay = Drupal::entityTypeManager()
				->getStorage('entity_form_display')
				->load('paragraph.cern_section.default');


		$manageFormDisplay->setComponent($fieldName,
				[
						'weight' => -10,
						'type' => 'boolean_checkbox',
						'region' => 'content',
						'settings' => ['display_label' => 'true'],
						'third_party_settings' => [],
				])->save();

	} catch (EntityStorageException $e) {
		throw $e;
	}  catch (PluginNotFoundException $e) {
		throw $e;
	}

}


