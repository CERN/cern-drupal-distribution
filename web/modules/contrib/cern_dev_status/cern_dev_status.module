<?php

/**
 * @file
 * Contains hooks implementations and helper functions for cern_dev_status.
 */

module_load_include('inc', 'cern_dev_status', 'cern_dev_status.default_settings');

use Drupal\Component\Utility\Html;
use Drupal\Core\Link;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Template\Attribute;

/**
 * Implements hook_help().
 */
function cern_dev_status_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the cern_dev_status module.
    case 'help.page.cern_dev_status':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Displays a banner at the bottom of the website and applies styles according to its development status. Prevents anonymous users to access the website by checking their IP.[28~') . '</p>';
      return $output;

    default:
  }
}

/**
 * Helper function to return a default value if value is null.
 *
 * @param $value
 * @param $default_value
 * @return mixed
 */
function _cern_dev_status_get_default_value($value, $default_value) {
  if (is_null($value) || $value === '') {
    return $default_value;
  }

  return $value;
}

/**
 * Implements hook_page_bottom().
 * If the dev-styling is enabled,
 * injects some html on the pages with the style for the environment chosen.
 * Dashboard won't be affected.
 */
function cern_dev_status_page_bottom(array &$page_bottom) {
  $config = \Drupal::config('cern_dev_status.settings');
  $en_styling = _cern_dev_status_get_default_value($config->get('enable_devstyling'), DEFAULT_ENABLE_DEVSTYLING);
  if($en_styling) {
    $style = _cern_dev_status_get_default_value(\Drupal::config('cern_dev_status.settings')->get('devstyling_type'), DEFAULT_DEVSTYLING_TYPE);
    $page_bottom['cern_dev_status'] = ['#markup' => _cern_dev_status_output($style)];
  }
}

/**
 * Output the html code to inject on the pages
 */
function _cern_dev_status_output($style) {
  $output = '';
  $output .= '<div id="dev-status-message" class="dev-status-' . $style . ' js-disabled">';
  $output .= '<div id="dev-status-action"><span class="action-open">open +</span><span class="action-close">close -</span></div>';
  $output .= '<div id="dev-status-message-content">';
  $output .= '<span id="dev-status-icon" ></span>';

  $output .= '  <h3><strong>'. strtoupper(_cern_dev_status_hr($style)) . '</strong> website</h3>';
  if (isset($message)) $output .= '<p>' . HTML::escape($message) . '</p>';

  // Get current user
  $user = \Drupal::currentUser();
  if ($style === 'personal') {
    $output .= '<p>The content on this site does not necessarily represent the views or position of the Organization.</p>';
  }
  $configure_link = Link::createFromRoute('configure', 'cern_dev_status.settings')->toString();
  if ($user->hasPermission('administer cern dev-status') && ($style === 'dev')) {
    $output .= '<p><em>To disable this warning '.$configure_link.' the CERN Dev-Status module.</em></p><p><em>You can find more information about Drupal development in <a href="http://entice.web.cern.ch">Entice site</a>, where CERN Drupal developers community gathers to share information.</em></p>';
  }
  if ($user->hasPermission('administer cern dev-status') && ($style === 'archive')) {
    $output .= '<p><em>If you need to unarchive this site, please <a href="https://cern.service-now.com/service-portal/report-ticket.do?name=request&fe=drupal-infrastructure">open a ticket</a>.</em></p>';
  }

  $output .='</div><!-- / dev-status-message-content -->';
  $output .='</div><!-- / dev-status-message -->';

  return $output;
}


/**
 * Helper function to convert the style names from machine to human readable.
 */
function _cern_dev_status_hr($style_machine_code) {
  switch ($style_machine_code) {
    case 'dev':
      $human = 'Development';
      break;
    case 'preprod':
      $human = 'Pre-production';
      break;
    case 'personal':
      $human = 'Personal';
      break;
    case 'archive':
      $human = 'Archived';
      break;
    default:
      $human = '';
      break;
  }
  return $human;
}


/**
 * Implements hook_page_attachments().
 */
function cern_dev_status_page_attachments(array &$attachments) {
  $attachments['#attached']['library'][] = 'cern_dev_status/cern-dev-status';
}

/**
 * Override of template_preprocess_html()
 *
 * Add a class to the $classes array that can be used to apply styles via the cern_default theme (if option's enabled)
 * This function unsets $page_top and $page_bottom
 * so that they are not passed to html.tpl.php,
 * preventing these regions from being rendered
 */
function cern_dev_status_preprocess_html(&$vars) {

  $config = \Drupal::config('cern_dev_status.settings');
  // CUSTOM DEV CLASSES FOR THEMING
  $en_styling = _cern_dev_status_get_default_value($config->get('enable_devstyling'), DEFAULT_ENABLE_DEVSTYLING);
  if ($en_styling) {
    $style = _cern_dev_status_get_default_value($config->get('devstyling_type'), DEFAULT_DEVSTYLING_TYPE);
    if (is_array($vars['attributes'])) {
      $oldvars = $vars;
      $vars['attributes'] = new Attribute();
      $vars['attributes']->addClass('dev-status-' . $style); //Gets rendered in your page.tpl as a variable called $classes;
      $vars['attributes']->addClass('padbot'); //This class is applied to the body to avoid the #dev-status-message div to hide the Save button while editing nodes/saving configurations. see dev_styling.css

      foreach ($oldvars['attributes'] as $key => $value) {
        $vars['attributes']->addClass($value);
      }
    }
  }

  $en_noindex = _cern_dev_status_get_default_value($config->get('enable_noindex'), DEFAULT_ENABLE_NOINDEX);
  if($en_noindex) {
    $noindex = ['#tag' => 'meta', '#attributes' => ['name' => 'robots', 'content' => 'noindex',]];
    $vars['page']['#attached']['html_head'][] = [$noindex, 'noindex'];
  }
}

/**
 * Implements hook_preprocess_page().
 *
 * Removes the data from various areas of the page for users whose accounts have been blocked,
 * preventing the areas from being rendered (if option's enabled)
 */
function cern_dev_status_preprocess_page(&$items) {
  //IP RESTRICTION
  if (_cern_dev_status_restrict_ip_value()) {
    $regions = \Drupal::theme()->getActiveTheme()->getRegions();
    $regions_to_leave = [
      'content',
      'highlighted',
      'header',
      'footer',
    ];
    foreach ($regions as $region) {
      if (!in_array($region,$regions_to_leave)) {
        if (isset($items['page'][$region])) {
          $items['page'][$region] = '';
        }
      }
    }
  }
}


// Functions for IP restriction feature


/**
 * Function used to set or determine if the user's ip address is not whitelisted
 */
function _cern_dev_status_restrict_ip_value($block = FALSE) {
  $blocked = &drupal_static(__function__);
  if (is_null($blocked)) $blocked = FALSE;
  if ($block) $blocked = TRUE;
  return $blocked;
}
