<?php

use \Drupal\cern_cds_media\Plugin\Field\FieldType\CernCdsMedia;

/**
 * Add new video controls and change caption size
 */
function cern_cds_media_update_8101(&$sandbox){
  foreach(CernCdsMedia::$metadata_boolean as $boolean_field) {
    cern_cds_media_field_definition_add_helper('CernCdsMedia', $boolean_field);
  }
  foreach(CernCdsMedia::$metadata_integer as $integer_field) {
    cern_cds_media_field_definition_add_helper('CernCdsMedia', $integer_field);
  }
  _cern_cds_media_field_type_schema_column_spec_change_helper('CernCdsMedia', CernCdsMedia::$metadata_text);
}

function cern_cds_media_update_8102(&$sandbox){  
  cern_cds_media_field_definition_add_helper('CernCdsMedia', 'download_url');
  cern_cds_media_field_definition_add_helper('CernCdsMedia', 'download_sizes');
}


/**
 * Helper function for HOOK_Update to update the field schema columns.
 * List the columns with changed schema values and the helper will handle
 * the content migration and entity update for you.
 *
 * @param $field_type The field type id e.g. "drowl_paragraphs_settings"
 * @param $column
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 * @throws \Drupal\Core\Entity\Sql\SqlContentEntityStorageException
 */
function _cern_cds_media_field_type_schema_column_spec_change_helper($field_type, $column) {
  $processed_fields = [];
  $field_type_manager = \Drupal::service('plugin.manager.field.field_type');
  $field_definition = $field_type_manager->getDefinition($field_type);
  $field_item_class = $field_definition['class'];

  $schema = \Drupal::database()->schema();
  $entity_type_manager = \Drupal::entityTypeManager();
  $entity_field_manager = \Drupal::service('entity_field.manager');
  $entity_field_map = $entity_field_manager->getFieldMapByFieldType($field_type);
  // The key-value collection for tracking installed storage schema.
  $entity_storage_schema_sql = \Drupal::keyValue('entity.storage_schema.sql');
  $entity_definitions_installed = \Drupal::keyValue('entity.definitions.installed');

  foreach ($entity_field_map as $entity_type_id => $field_map) {
    $entity_storage = $entity_type_manager->getStorage($entity_type_id);
    $entity_type = $entity_type_manager->getDefinition($entity_type_id);
    $field_storage_definitions = $entity_field_manager->getFieldStorageDefinitions($entity_type_id);
    /** @var Drupal\Core\Entity\Sql\DefaultTableMapping $table_mapping */
    $table_mapping = $entity_storage->getTableMapping($field_storage_definitions);
    // Only need field storage definitions of address fields.
    /** @var \Drupal\Core\Field\FieldStorageDefinitionInterface $field_storage_definition */
    foreach (array_intersect_key($field_storage_definitions, $field_map) as $field_storage_definition) {
      $field_name = $field_storage_definition->getName();
      $tables = [];
      try {
        $table = $table_mapping->getFieldTableName($field_name);
        $tables[] = $table;
      } catch (SqlContentEntityStorageException $e) {
        // Custom storage? Broken site? No matter what, if there is no table
        // or column, there's little we can do.
        continue;
      }
      // See if the field has a revision table.
      $revision_table = NULL;
      if ($entity_type->isRevisionable() && $field_storage_definition->isRevisionable()) {
        if ($table_mapping->requiresDedicatedTableStorage($field_storage_definition)) {
          $revision_table = $table_mapping->getDedicatedRevisionTableName($field_storage_definition);
          $tables[] = $revision_table;
        }
        elseif ($table_mapping->allowsSharedTableStorage($field_storage_definition)) {
          $revision_table = $entity_type->getRevisionDataTable() ?: $entity_type->getRevisionTable();
          $tables[] = $revision_table;
        }
      }
      $database = \Drupal::database();
      $existing_data = [];
      foreach ($tables as $table) {
        // Get the old data.
        $existing_data[$table] = $database->select($table)
          ->fields($table)
          ->execute()
          ->fetchAll(PDO::FETCH_ASSOC);
        // Wipe it.
        $database->truncate($table)->execute();
      }
      $manager = \Drupal::entityDefinitionUpdateManager();
      $manager->updateFieldStorageDefinition($manager->getFieldStorageDefinition($field_name, $entity_type_id));

      // Restore the data.
      foreach ($tables as $table) {
        $end = end($existing_data[$table]);
        if ($end !== FALSE) {
          $insert_query = $database
            ->insert($table)
            ->fields(array_keys($end));
          foreach ($existing_data[$table] as $row) {
            $insert_query->values(array_values($row));
          }
          $insert_query->execute();
        }
      }
    }
  }
}

/**
 * Add a new column for fieldType
 * @param string $field_type
 * @param sring $new_property
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 */
function cern_cds_media_field_definition_add_helper($field_type, $new_property) {
  $manager   = \Drupal::entityDefinitionUpdateManager();
  $field_map = \Drupal::service('entity_field.manager')->getFieldMapByFieldType($field_type);
  foreach ($field_map as $entity_type_id => $fields) {
    foreach (array_keys($fields) as $field_name) {
      $field_storage_definition = $manager->getFieldStorageDefinition($field_name, $entity_type_id);
      $storage = \Drupal::entityTypeManager()->getStorage($entity_type_id);

      if ($storage instanceof \Drupal\Core\Entity\Sql\SqlContentEntityStorage) {
        $table_mapping = $storage->getTableMapping([
          $field_name => $field_storage_definition,
        ]);
        $table_names = $table_mapping->getDedicatedTableNames();
        $columns = $table_mapping->getColumnNames($field_name);

        foreach ($table_names as $table_name) {
          $field_schema = $field_storage_definition->getSchema();
          $schema = \Drupal::database()->schema();
          $field_exists = $schema->fieldExists($table_name, $columns[$new_property]);
          $table_exists = $schema->tableExists($table_name);

          if (!$field_exists && $table_exists) {
            $schema->addField($table_name, $columns[$new_property], $field_schema['columns'][$new_property]);
          }
        }
      }
    }
  }

}

