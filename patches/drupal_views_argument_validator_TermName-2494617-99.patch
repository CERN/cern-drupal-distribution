diff --git a/core/modules/taxonomy/src/Plugin/views/argument_validator/TermName.php b/core/modules/taxonomy/src/Plugin/views/argument_validator/TermName.php
index 1a81b2f..23920db 100644
--- a/core/modules/taxonomy/src/Plugin/views/argument_validator/TermName.php
+++ b/core/modules/taxonomy/src/Plugin/views/argument_validator/TermName.php
@@ -66,22 +66,22 @@ public function validateArgument($argument) {
       $argument = str_replace('-', ' ', $argument);
       $this->argument->argument = $argument;
     }
-    $terms = $this->termStorage->loadByProperties(['name' => $argument]);
-
-    if (!$terms) {
-      // Returned empty array no terms with the name.
-      return FALSE;
+    // If bundles is set then restrict the loaded terms to the given bundles.
+    if (!empty($this->options['bundles'])) {
+      $terms = $this->termStorage->loadByProperties(['name' => $argument, 'vid' => $this->options['bundles']]);
+    }
+    else {
+      $terms = $this->termStorage->loadByProperties(['name' => $argument]);
     }
 
-    // Not knowing which term will be used if more than one is returned check
-    // each one.
+    // $terms are already bundle tested but we need to test access control.
     foreach ($terms as $term) {
-      if (!$this->validateEntity($term)) {
-        return FALSE;
+      if ($this->validateEntity($term)) {
+        return TRUE;
       }
     }
 
-    return TRUE;
+    return FALSE;
   }
 
 }
diff --git a/core/modules/taxonomy/tests/modules/taxonomy_test_views/test_views/views.view.test_taxonomy_name_argument.yml b/core/modules/taxonomy/tests/modules/taxonomy_test_views/test_views/views.view.test_taxonomy_name_argument.yml
new file mode 100644
index 0000000..794dce6
--- /dev/null
+++ b/core/modules/taxonomy/tests/modules/taxonomy_test_views/test_views/views.view.test_taxonomy_name_argument.yml
@@ -0,0 +1,235 @@
+langcode: en
+status: true
+dependencies:
+  config:
+    - taxonomy.vocabulary.tags
+  module:
+    - taxonomy
+    - user
+id: test_taxonomy_name_argument
+label: 'Test taxonomy term argument'
+module: views
+description: ''
+tag: ''
+base_table: taxonomy_term_field_data
+base_field: tid
+display:
+  default:
+    display_plugin: default
+    id: default
+    display_title: Master
+    position: 0
+    display_options:
+      access:
+        type: perm
+        options:
+          perm: 'access content'
+      cache:
+        type: tag
+        options: {  }
+      query:
+        type: views_query
+        options:
+          disable_sql_rewrite: false
+          distinct: false
+          replica: false
+          query_comment: ''
+          query_tags: {  }
+      exposed_form:
+        type: basic
+        options:
+          submit_button: Apply
+          reset_button: false
+          reset_button_label: Reset
+          exposed_sorts_label: 'Sort by'
+          expose_sort_order: true
+          sort_asc_label: Asc
+          sort_desc_label: Desc
+      pager:
+        type: mini
+        options:
+          items_per_page: 10
+          offset: 0
+          id: 0
+          total_pages: null
+          expose:
+            items_per_page: false
+            items_per_page_label: 'Items per page'
+            items_per_page_options: '5, 10, 25, 50'
+            items_per_page_options_all: false
+            items_per_page_options_all_label: '- All -'
+            offset: false
+            offset_label: Offset
+          tags:
+            previous: â€¹â€¹
+            next: â€ºâ€º
+      style:
+        type: default
+        options:
+          grouping: {  }
+          row_class: ''
+          default_row_class: true
+          uses_fields: false
+      row:
+        type: fields
+        options:
+          inline: {  }
+          separator: ''
+          hide_empty: false
+          default_field_elements: true
+      fields:
+        name:
+          id: name
+          table: taxonomy_term_field_data
+          field: name
+          entity_type: taxonomy_term
+          entity_field: name
+          label: ''
+          alter:
+            alter_text: false
+            make_link: false
+            absolute: false
+            trim: false
+            word_boundary: false
+            ellipsis: false
+            strip_tags: false
+            html: false
+          hide_empty: false
+          empty_zero: false
+          type: string
+          settings:
+            link_to_entity: true
+          plugin_id: term_name
+          relationship: none
+          group_type: group
+          admin_label: ''
+          exclude: false
+          element_type: ''
+          element_class: ''
+          element_label_type: ''
+          element_label_class: ''
+          element_label_colon: true
+          element_wrapper_type: ''
+          element_wrapper_class: ''
+          element_default_classes: true
+          empty: ''
+          hide_alter_empty: true
+          click_sort_column: value
+          group_column: value
+          group_columns: {  }
+          group_rows: true
+          delta_limit: 0
+          delta_offset: 0
+          delta_reversed: false
+          delta_first_last: false
+          multi_type: separator
+          separator: ', '
+          field_api_classes: false
+          convert_spaces: false
+      filters:
+        vid:
+          id: vid
+          table: taxonomy_term_field_data
+          field: vid
+          relationship: none
+          group_type: group
+          admin_label: ''
+          operator: in
+          value:
+            tags: tags
+          group: 1
+          exposed: false
+          expose:
+            operator_id: ''
+            label: ''
+            description: ''
+            use_operator: false
+            operator: ''
+            operator_limit_selection: false
+            operator_list: {  }
+            identifier: ''
+            required: false
+            remember: false
+            multiple: false
+            remember_roles:
+              authenticated: authenticated
+            reduce: false
+          is_grouped: false
+          group_info:
+            label: ''
+            description: ''
+            identifier: ''
+            optional: true
+            widget: select
+            multiple: false
+            remember: false
+            default_group: All
+            default_group_multiple: {  }
+            group_items: {  }
+          entity_type: taxonomy_term
+          entity_field: vid
+          plugin_id: bundle
+      sorts: {  }
+      header: {  }
+      footer: {  }
+      empty: {  }
+      relationships: {  }
+      arguments:
+        name:
+          id: name
+          table: taxonomy_term_field_data
+          field: name
+          relationship: none
+          group_type: group
+          admin_label: ''
+          default_action: ignore
+          exception:
+            value: all
+            title_enable: false
+            title: All
+          title_enable: false
+          title: ''
+          default_argument_type: fixed
+          default_argument_options:
+            argument: ''
+          default_argument_skip_url: false
+          summary_options:
+            base_path: ''
+            count: true
+            items_per_page: 25
+            override: false
+          summary:
+            sort_order: asc
+            number_of_records: 0
+            format: default_summary
+          specify_validation: true
+          validate:
+            type: taxonomy_term_name
+            fail: 'not found'
+          validate_options:
+            bundles:
+              tags: tags
+            operation: view
+            access: false
+            transform: false
+          glossary: false
+          limit: 0
+          case: none
+          path_case: none
+          transform_dash: false
+          break_phrase: false
+          add_table: false
+          require_value: false
+          entity_type: taxonomy_term
+          entity_field: name
+          plugin_id: string
+      display_extenders: {  }
+    cache_metadata:
+      max-age: -1
+      contexts:
+        - 'languages:language_content'
+        - 'languages:language_interface'
+        - url
+        - url.query_args
+        - user.permissions
+      tags: {  }
diff --git a/core/modules/taxonomy/tests/src/Functional/Views/TermsWithSameName.php b/core/modules/taxonomy/tests/src/Functional/Views/TermsWithSameName.php
new file mode 100644
index 0000000..073024d
--- /dev/null
+++ b/core/modules/taxonomy/tests/src/Functional/Views/TermsWithSameName.php
@@ -0,0 +1,107 @@
+<?php
+
+namespace Drupal\Tests\taxonomy\Functional\Views;
+
+use Drupal\Core\Language\LanguageInterface;
+use Drupal\taxonomy\Entity\Term;
+use Drupal\taxonomy\Entity\Vocabulary;
+use Drupal\views\Views;
+
+/**
+ * Tests the term_name field handler.
+ *
+ * @group taxonomy
+ *
+ * @see \Drupal\taxonomy\Plugin\views\field\TermName
+ */
+class TermsWithSameName extends TaxonomyTestBase {
+
+  /**
+   * {@inheritdoc}
+   */
+  protected static $modules = [
+    'taxonomy',
+    'taxonomy_test_views',
+    'views',
+  ];
+
+  /**
+   * {@inheritdoc}
+   */
+  public static $testViews = ['test_taxonomy_name_argument'];
+
+  /**
+   * {@inheritdoc}
+   */
+  protected $defaultTheme = 'stark';
+
+  /**
+   * {@inheritdoc}
+   */
+  protected function setUp($import_test_views = TRUE): void {
+    parent::setUp($import_test_views);
+  }
+
+  /**
+   * Tests term name field plugin functionality.
+   */
+  public function testTermNameArgument() {
+    $new_vocabulary = Vocabulary::create([
+      'name' => 'tags',
+      'description' => 'tags',
+      'vid' => 'tags',
+      'langcode' => LanguageInterface::LANGCODE_NOT_SPECIFIED,
+      'weight' => mt_rand(0, 10),
+    ]);
+    $new_vocabulary->save();
+    $values = ['name' => 'duplicate', 'vid' => $this->vocabulary->get('vid')];
+    $term1 = Term::create($values);
+    $term1->save();
+
+    $values['vid'] = $new_vocabulary->get('vid');
+    $term2 = Term::create($values);
+    $term2->save();
+
+    $values['name'] = 'single';
+    $term3 = Term::create($values);
+    $term3->save();
+
+    // Making sure terms have the same name.
+    $this->assertEqual($term1->getName(), $term2->getName());
+    // Making sure terms have different bundles.
+    $this->assertNotEquals($term1->get('vid'), $term2->get('vid'));
+
+    $view = Views::getView('test_taxonomy_name_argument');
+    $view->initDisplay();
+
+    $view->setArguments([$term3->getName()]);
+    $view->build();
+    $view->execute();
+    // Making sure the view has result.
+    $results = [];
+    foreach ($view->result as $resultRow) {
+      $results[] = $resultRow->_entity->getName();
+    }
+    // Let's see what are the results.
+    $this->htmlOutput('View results: ' . implode(', ', $results));
+    $this->assertContains($term3->getName(), $results);
+    $this->assertNotContains($term1->getName(), $results);
+
+    $view_second = Views::getView('test_taxonomy_name_argument');
+    $view_second->initDisplay();
+    $view_second->setArguments([$term1->getName()]);
+    $view_second->build();
+    $view_second->execute();
+    // Making sure the view has the correct results.
+    $results = [];
+    foreach ($view_second->result as $resultRow) {
+      $results[] = $resultRow->_entity->getName();
+    }
+    // Let's see what are the results.
+    $this->htmlOutput('View results: ' . implode(', ', $results));
+    $this->assertContains($term1->getName(), $results);
+    $this->assertNotContains($term3->getName(), $results);
+
+  }
+
+}
