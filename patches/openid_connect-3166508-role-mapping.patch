diff --git a/config/install/openid_connect.settings.generic.yml b/config/install/openid_connect.settings.generic.yml
index 2003cb0..a524c99 100644
--- a/config/install/openid_connect.settings.generic.yml
+++ b/config/install/openid_connect.settings.generic.yml
@@ -5,3 +5,4 @@ settings:
   authorization_endpoint: 'https://example.com/oauth2/authorize'
   token_endpoint: 'https://example.com/oauth2/token'
   userinfo_endpoint: 'https://example.com/oauth2/UserInfo'
+  role_eval_every_time: true
diff --git a/config/install/openid_connect.settings.yml b/config/install/openid_connect.settings.yml
index 5217e2b..40767fc 100644
--- a/config/install/openid_connect.settings.yml
+++ b/config/install/openid_connect.settings.yml
@@ -4,3 +4,4 @@ override_registration_settings: false
 user_login_display: 'hidden'
 userinfo_mappings:
   timezone: zoneinfo
+debug: false
diff --git a/config/schema/openid_connect.schema.yml b/config/schema/openid_connect.schema.yml
index 6d22ded..d638a50 100644
--- a/config/schema/openid_connect.schema.yml
+++ b/config/schema/openid_connect.schema.yml
@@ -26,7 +26,9 @@ openid_connect.settings:
         picture:
           type: string
           label: 'Picture'
-
+    debug:
+      type: boolean
+      label: 'Expand the level of Drupal logging to include debugging information'
 openid_connect.settings.facebook:
   type: config_object
   label: 'OpenID Connect Facebook settings'
@@ -72,7 +74,9 @@ openid_connect.settings.generic:
         userinfo_endpoint:
           type: string
           label: 'Userinfo endpoint'
-
+        role_eval_every_time:
+          type: boolean
+          label: 'Reevaluate roles every time the user logs in'
 openid_connect.settings.github:
   type: config_object
   label: 'OpenID Connect GitHub settings'
diff --git a/src/Form/OpenIDConnectSettingsForm.php b/src/Form/OpenIDConnectSettingsForm.php
index 14ab68e..d253895 100644
--- a/src/Form/OpenIDConnectSettingsForm.php
+++ b/src/Form/OpenIDConnectSettingsForm.php
@@ -197,6 +197,7 @@ class OpenIDConnectSettingsForm extends ConfigFormBase implements ContainerInjec
       '#type' => 'fieldset',
     ];
 
+    # accidentally duplicated?
     $form['override_registration_settings'] = [
       '#type' => 'checkbox',
       '#title' => $this->t('Override registration settings'),
@@ -204,6 +205,18 @@ class OpenIDConnectSettingsForm extends ConfigFormBase implements ContainerInjec
       '#default_value' => $settings->get('override_registration_settings'),
     ];
 
+    $form['debugging'] = [
+      '#type' => 'fieldset',
+      '#title' => $this->t('Debugging'),
+      '#collapsible' => FALSE,
+    ];
+    $form['debugging']['debug'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Turn on debugging messages'),
+      '#description' => $this->t('Expand the level of Drupal logging to include debugging information.'),
+      '#default_value' => $settings->get('debug'),
+    ];
+
     $properties = $this->entityFieldManager->getFieldDefinitions('user', 'user');
     $properties_skip = $this->openIDConnect->userPropertiesIgnore();
     $claims = $this->claims->getOptions();
@@ -271,6 +284,7 @@ class OpenIDConnectSettingsForm extends ConfigFormBase implements ContainerInjec
       ->set('override_registration_settings', $form_state->getValue('override_registration_settings'))
       ->set('userinfo_mappings', $form_state->getValue('userinfo_mappings'))
       ->set('user_login_display', $form_state->getValue('user_login_display'))
+      ->set('debug', $form_state->getValue('debugging')["debug"])
       ->save();
 
     // Get clients' enabled status.
diff --git a/src/OpenIDConnect.php b/src/OpenIDConnect.php
index ca0911b..e1232a7 100644
--- a/src/OpenIDConnect.php
+++ b/src/OpenIDConnect.php
@@ -16,6 +16,7 @@ use Drupal\openid_connect\Plugin\OpenIDConnectClientInterface;
 use Drupal\user\UserDataInterface;
 use Drupal\user\UserInterface;
 use Drupal\Component\Utility\EmailValidatorInterface;
+use Drupal\user\Entity\Role;
 
 /**
  * Main service of the OpenID Connect module.
@@ -395,6 +396,11 @@ class OpenIDConnect {
 
     $this->loginUser($account);
 
+    // Determine if roles should be evaluated upon login.
+    if ($this->configFactory->get('openid_connect.settings.' . $client->getPluginId())->get('settings.role_eval_every_time')) {
+      $this->roleMatchSync($client, $account, $context);
+    }
+
     $this->moduleHandler->invokeAll(
       'openid_connect_post_authorize',
       [
@@ -455,6 +461,71 @@ class OpenIDConnect {
     return TRUE;
   }
 
+  /**
+   * Synchronizes (adds/removes) user account roles.
+   *
+   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client
+   *   The client.
+   * @param \Drupal\user\UserInterface $account
+   *   The Drupal user to sync roles for.
+   * @param array $context
+   *   An associative array with context information:
+   *   - tokens:         An array of tokens.
+   *   - user_data:      An array of user and session data.
+   *   - userinfo:       An array of user information.
+   *   - plugin_id:      The plugin identifier.
+   *   - sub:            The remote user identifier.
+   *
+   * @throws EntityStorageException
+   */
+  public function roleMatchSync(OpenIDConnectClientInterface $client, UserInterface $account, array $context) {
+    // Get user's current roles, excluding locked roles (e.g. Authenticated).
+    $current_roles = $account->getRoles(TRUE);
+    // Get OICD user roles
+    $openid_roles = $this->getOIDCRoles($client, $context);
+
+    if ($this->configFactory->get('openid_connect.settings')->get('debug')) {
+      $this->logger->debug('Current user roles: %roles', [
+        '%roles' => json_encode($current_roles),
+      ]);
+      $this->logger->debug('OICD matched roles: %roles', ['%roles' => json_encode($openid_roles)]);
+    }
+
+    // Set boolean to only update account when needed.
+    $account_updated = FALSE;
+
+    // Remove non-locked roles not mapped to the user via OIDC.
+    foreach (array_diff($current_roles, $openid_roles) as $role_id) {
+      if ($this->configFactory->get('openid_connect.settings')->get('debug')) {
+        $this->logger->debug('Removing role %role from user %name', [
+          '%role' => $role_id,
+          '%name' => $account->getAccountName(),
+        ]);
+      }
+      $account->removeRole($role_id);
+      $account_updated = TRUE;
+    }
+
+    // Add roles mapped to the user via OIDC.
+    foreach (array_diff($openid_roles, $current_roles) as $role_id) {
+      if ($this->configFactory->get('openid_connect.settings')->get('debug')) {
+        $this->logger->debug('Adding role %role to user %name', [
+          '%role' => $role_id,
+          '%name' => $account->getAccountName(),
+          ]);
+      }
+      $account->addRole($role_id);
+      $account_updated = TRUE;
+    }
+    if ($account_updated) {
+      $account->save();
+    }
+
+    if ($this->configFactory->get('openid_connect.settings')->get('debug')) {
+      $this->logger->debug('User final roles: %roles', ['%roles' => json_encode($account->getRoles())]);
+    }
+  }
+
   /**
    * Find whether a user is allowed to change the own password.
    *
@@ -691,4 +762,33 @@ class OpenIDConnect {
     $account->save();
   }
 
+
+  /**
+   * Returns OpenID Connect Role claims.
+   *
+   * @param \Drupal\openid_connect\Plugin\OpenIDConnectClientInterface $client
+   *   The client.
+   * @param array $context
+   *   An associative array with context information:
+   *   - tokens:         An array of tokens.
+   *   - user_data:      An array of user and session data.
+   *   - userinfo:       An array of user information.
+   *   - plugin_id:      The plugin identifier.
+   *   - sub:            The remote user identifier.
+   *
+   * @return array
+   *   List of Role claims.
+   */
+  public function getOIDCRoles(OpenIDConnectClientInterface $client, array $context): array {
+    $client_id = $this->configFactory->get('openid_connect.settings.' . $client->getPluginId())->get('settings.client_id');
+    $oidc_mapped_roles = $context['user_data']['resource_access'][$client_id]['roles'];
+    $all_roles = array_keys(Role::loadMultiple());
+
+    if ($this->configFactory->get('openid_connect.settings')->get('debug')) {
+      $this->logger->debug('OICD roles: %roles', ['%roles' => json_encode($oidc_mapped_roles)]);
+      $this->logger->debug('Drupal roles: %roles', ['%roles' => json_encode($all_roles)]);
+    }
+
+    return array_values(array_intersect($all_roles, $oidc_mapped_roles));
+  }
 }
diff --git a/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php b/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php
index 48a727d..17abc36 100644
--- a/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php
+++ b/src/Plugin/OpenIDConnectClient/OpenIDConnectGenericClient.php
@@ -51,6 +51,12 @@ class OpenIDConnectGenericClient extends OpenIDConnectClientBase {
       '#default_value' => $this->configuration['userinfo_endpoint'],
     ];
 
+    $form['role_eval_every_time'] = [
+      '#type' => 'checkbox',
+      '#title' => $this->t('Reevaluate roles every time the user logs in'),
+      '#default_value' => $this->configuration['role_eval_every_time'],
+    ];
+
     return $form;
   }
 
@@ -62,6 +68,7 @@ class OpenIDConnectGenericClient extends OpenIDConnectClientBase {
       'authorization' => $this->configuration['authorization_endpoint'],
       'token' => $this->configuration['token_endpoint'],
       'userinfo' => $this->configuration['userinfo_endpoint'],
+      'role_eval_every_time' => $this->configuration['role_eval_every_time']
     ];
   }
 
diff --git a/src/Plugin/OpenIDConnectClient/OpenIDConnectGithubClient.php b/src/Plugin/OpenIDConnectClient/OpenIDConnectGithubClient.php
index 110c580..00b077e 100644
--- a/src/Plugin/OpenIDConnectClient/OpenIDConnectGithubClient.php
+++ b/src/Plugin/OpenIDConnectClient/OpenIDConnectGithubClient.php
@@ -70,7 +70,7 @@ class OpenIDConnectGithubClient extends OpenIDConnectClientBase {
   /**
    * {@inheritdoc}
    */
-  public function decodeIdToken($id_token) {
+  public function decodeIdToken($id_token = null) {
     return [];
   }
 
